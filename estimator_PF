function [locationParticles, upDownParticles, biasParticles, estState]...
                        = Estimator(estState, sense, actuate, t, knownConst)
% [locationParticles, upDownParticles, biasParticles, estState]
%                       = Estimator(estState,sense,actuate,t,knownConst)
% 
% The estimator.
% The function will be called in two different modes:
% If t==0, the estimator is initialized; otherwise the estimator does an 
% iteration step (compute particles for the time t).
%
% Inputs:
%   estState            previous estimator state (time t-1)
%                       **may be defined by the user (for example as a
%                       struct)**
%   sense               sensor measurements at time t, [1x2]-vector,
%                       INF if no measurement
%                       sense(1): distance sensor measurement
%                       sense(2): half-plane sensor measurement
%   actuate             control input at time t, scalar
%   t                   time, scalar
%                       If t==0 initialization, otherwise estimator
%                       iteration step.
%   knownConst          known constants (from KnownConstants.m)
%
% Outputs:
%   locationParticles   particles representing the estimate of theta
%                       the particle angle at time t
%                       [1 x knownConst.NumParticles]-vector
%   upDownParticles     particles representing the estimate of phi, which
%                       indicates whether the object is on the upper (1) or
%                       lower(-1) circle, at time t
%                       [1 x knownConst.NumParticles]-vector
%                       Must contain *only* values +1 or -1.
%   biasParticles       particles representing the estimate of the bias b at time t
%                       [1 x knownConst.NumParticles]-vector
%   estState            current estimator state at time t
%                       **will be input to this function at the next call**
%
%       
% Class:
% Introduction to Recursive Filtering and Estimation
% Spring 2016
% Programming Exercise 2
%
% --
% ETH Zurich
% Institute for Dynamic Systems and Control
% Raffaello D'Andrea, Markus Hehn, Max Kriegleder
%

nParticles = knownConst.NumParticles;   
                                           
if (t == 0)
    %% Mode 1: Initialization
    % Do the initialization of your estimator here!
    
    estState.theta = zeros(1,nParticles);
    estState.plane = zeros(1,nParticles);
    estState.bias = zeros(1,nParticles);
    for i=1:nParticles
        estState.theta(i) = UniformMinMax(0,2*pi);
        estState.plane(i) = -1+(rand>0.5)*2;
        estState.bias(i) = Uniform(knownConst.MotionErr);       
    end
    
    
else
    %% Mode 2: Estimator iteration.
    % If we get this far t is not equal to zero, and we are no longer
    % initializing.  Run the estimator.
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%% prior update %%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     
    for i=1:nParticles
       s = estState.bias(i) + Uniform(knownConst.MotionErr); % process noise
       theta = estState.theta(i) + actuate + s;
      
       % decide if we wanna switch circles when reaching the intersection
       % point
       if theta >= 2*pi || theta < 0
           if rand > knownConst.sideKeepingPreference
              estState.plane(i) = -1 * estState.plane(i); 
           end
       end
       estState.theta(i) = mod(theta, 2*pi);   
    end  
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%% measurement update %%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    % if one of the sensor has value, do the measurement update
    if sense(1)~=Inf || sense(2)~=Inf
        
        weight = zeros(1, nParticles);
        % have value from both sensors
        if sense(1) ~= Inf && sense(2) ~= Inf   

            for i=1:nParticles
                weight1 = zeros(1, nParticles);
                weight2 = zeros(1, nParticles);
                % dealing with distance sensor
                if estState.plane(i) == 1
                    dist = abs(abs(knownConst.SensorLoc - knownConst.radiusUpper * sin(estState.theta(i))) - sense(1));
                else
                    dist = abs(abs(knownConst.SensorLoc - knownConst.radiusLower * sin(estState.theta(i))) - sense(1));
                end
                if dist<knownConst.SensorErr
                    weight1(i) = 1/(knownConst.SensorErr)^2 * (knownConst.SensorErr -dist);
                end
                % dealing with half plane sensor
                if estState.plane(i) == sense(2)
                    weight2(i) = knownConst.HalfPlaneErr;
                else
                    weight2(i) = 1 - knownConst.HalfPlaneErr; 
                end
            end

            weight = weight1.*weight2;
            
        % have value only from the distance sensor
        elseif sense(1) ~= Inf
            for i=1:nParticles
                if estState.plane(i) == 1
                    dist = abs(abs(knownConst.SensorLoc - knownConst.radiusUpper * sin(estState.theta(i))) - sense(1));
                else
                    dist = abs(abs(knownConst.SensorLoc - knownConst.radiusLower * sin(estState.theta(i))) - sense(1));
                end 
                
                if dist<knownConst.SensorErr
                    weight(i) = 1/(knownConst.SensorErr)^2 * (knownConst.SensorErr -dist);
                end
            end
            
        % have value only from the half plane sensor
        else
            if estState.plane(i) == sense(2)
                weight(i) = knownConst.HalfPlaneErr;
            else
                weight(i) = 1 - knownConst.HalfPlaneErr; 
            end
            
        end
        
        weight = weight / sum(weight);
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%% Resampling %%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        
        state = estState;
        for j = 1:nParticles
            r = rand;
            sum_weight =0;
            for k = 1:nParticles
                sum_weight = sum_weight + weight(k);
                if sum_weight >= r
                    estState.theta(j) = state.theta(k);
                    estState.plane(j) = state.plane(k);
                    estState.bias(j) = state.bias(k);
                    break;
                end
            end
        end      
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%% Roughening %%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        K1 = 0.02;%0.008; % Tuning parameter for theta roughening
        K2 = 0.1;%0.01; % Tuning parameter for half plane roughening
        K3 = 0.1;%0.015; % Tuning parameter for bias roughening
        sigma1 = K1 * (max(estState.theta) - min(estState.theta)) * nParticles^(-1/3);        
        sigma2 = K2 * (max(estState.plane) - min(estState.plane)) * nParticles^(-1/3);
        % since the bias variance(sigma3) is eventually going to converge to zero
        % if we use the commented expression, i intentionally set it to a
        % constant value so it won't converge
        sigma3 = 0.0085;%K3 * (max(estState.bias) - min(estState.bias)) * nParticles^(-1/3);
        
        for i = 1: nParticles            
            estState.theta(i) = estState.theta(i) + normrnd(0, sigma1);
            estState.theta(i) = mod(estState.theta(i), 2*pi);
            
            estState.plane(i) = estState.plane(i) + normrnd(0, sigma2);
            if estState.plane(i) >=0 
                estState.plane(i) = 1;
            else
                estState.plane(i) = -1;
            end
            estState.bias(i) = estState.bias(i) + normrnd(0, sigma3);
            estState.bias(i) = max(estState.bias(i), -knownConst.MotionErr);
            estState.bias(i) = min(estState.bias(i), knownConst.MotionErr);
        end
    end
    
    
    
    
    
end

% change the previous time to the current time
estState.prev_t = t;

%% Output
locationParticles = estState.theta;
upDownParticles = estState.plane;
biasParticles = estState.bias;

end


